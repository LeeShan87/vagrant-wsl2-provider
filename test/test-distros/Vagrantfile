# Test Vagrantfile for WSL2 Provider Provisioner Testing
# Tests shell, file, and ansible provisioners across available WSL2 distributions

# WSL2 distributions available for testing (from wsl --list --online)
DISTRIBUTIONS = [
  "AlmaLinux-8",
  "AlmaLinux-9",
  "AlmaLinux-Kitten-10",
  "AlmaLinux-10",
  "Debian",
  "FedoraLinux-42",

#   ==> suselinuxenterprise15sp6: Running provisioner: file...
# The guest operating system of the machine could not be detected!
# Vagrant requires this knowledge to perform specific tasks such
# as mounting shared folders and configuring networks. Please add
# the ability to detect this guest operating system to Vagrant
# by creating a plugin or reporting a bug.
  # "SUSE-Linux-Enterprise-15-SP6",

# ==> suselinuxenterprise15sp7: Keeping existing default distribution: vagrant-test-almalinux8
# ==> suselinuxenterprise15sp7: WSL2 distribution created successfully
# ==> suselinuxenterprise15sp7: WSL2 distribution is already running
# ==> suselinuxenterprise15sp7: Setting up shared folders for WSL2 distribution
# ==> suselinuxenterprise15sp7: Creating shared folder: . -> /vagrant
# No error message
  # "SUSE-Linux-Enterprise-15-SP7",
  
  "Ubuntu",
  "Ubuntu-24.04",
  "archlinux",
  "kali-linux",
  "openSUSE-Tumbleweed",

# ==> opensuseleap156: WSL2 distribution created successfully
# ==> opensuseleap156: WSL2 distribution is already running
# ==> opensuseleap156: Setting up shared folders for WSL2 distribution
# ==> opensuseleap156: Creating shared folder: . -> /vagrant
# No error message
  # "openSUSE-Leap-15.6",

# ==> ubuntu2004: Using WSL distribution: Ubuntu-20.04
# ==> ubuntu2004: Creating clean base distribution: Ubuntu-20.04-vagrant-base
# ==> ubuntu2004: Installing fresh WSL distribution: Ubuntu-20.04
# Failed to install WSL distribution 'Ubuntu-20.04': Distribution 'Ubuntu-20.04' not found after installation completed. Check if installation was successful.  
# Distro in the old wsl store
  # "Ubuntu-20.04",

  # ==> ubuntu2204: Creating WSL2 distribution: vagrant-test-ubuntu2204
# ==> ubuntu2204: Using WSL distribution: Ubuntu-22.04
# ==> ubuntu2204: Creating clean base distribution: Ubuntu-22.04-vagrant-base
# ==> ubuntu2204: Installing fresh WSL distribution: Ubuntu-22.04
# Failed to install WSL distribution 'Ubuntu-22.04': Distribution 'Ubuntu-22.04' not found after installation completed. Check if installation was successful.
# Distro in the old wsl store
  # "Ubuntu-22.04",

# ==> oraclelinux79: Creating WSL2 distribution: vagrant-test-oraclelinux79
# ==> oraclelinux79: Using WSL distribution: OracleLinux_7_9
# ==> oraclelinux79: Creating clean base distribution: OracleLinux_7_9-vagrant-base
# ==> oraclelinux79: Installing fresh WSL distribution: OracleLinux_7_9
# wsl: Örökölt disztribúciós regisztráció használata. Fontolja meg inkább tar-alapú disztribúció használatát.
# Letöltés: Oracle Linux 7.9
# Oracle Linux 7.9 letöltve.
# A terjesztés telepítése sikerült. A wsl.exe -d Oracle Linux 7.9 használatával indítható el
# Failed to install WSL distribution 'OracleLinux_7_9': Distribution 'OracleLinux_7_9' not found after installation completed. Check if installation was successful.

# Untested
  # "OracleLinux_7_9",
  # "OracleLinux_8_10",
  # "OracleLinux_9_5"
]

Vagrant.configure("2") do |config|
  DISTRIBUTIONS.each do |distro|
    # Clean name for Vagrant machine
    machine_name = distro.downcase.gsub(/[^a-z0-9]/, '')

    config.vm.define machine_name do |node|
      # Set the box name to the WSL2 distribution name
      node.vm.box = distro

      node.vm.provider "wsl2" do |wsl|
        wsl.distribution_name = "vagrant-test2-#{machine_name}"
        wsl.memory = 1024
        wsl.cpus = 1
      end

      node.vm.synced_folder "../", "/vagrant-shared"

      # Test shell provisioning
      node.vm.provision "shell", inline: <<-SHELL
        echo "=== Testing #{distro} ==="
        echo "Hello from WSL2 Vagrant provider!"
        whoami
        uname -a
        echo "Shell provisioner completed successfully"
        echo "shell-test" > /home/vagrant/shell-test.txt
      SHELL

      # Test file provisioner
      node.vm.provision "file", source: "../test-file.txt", destination: "/home/vagrant/uploaded-file-test.txt"

      # Test ansible_local provisioner (commented out for faster testing)
      # node.vm.provision "ansible_local" do |ansible|
      #   ansible.playbook = "../test-playbook.yml"
      #   ansible.verbose = true
      #   ansible.install = true
      #   ansible.install_mode = :default  # Use apt instead of pip on Ubuntu
      # end

      # Show provisioning results
      node.vm.provision "shell", inline: <<-SHELL
        echo "=== Provisioning Results for #{distro} ==="
        echo "Files in /home/vagrant/:"
        ls -la /home/vagrant/ | grep -E '(test|ansible|chef)' || echo "No test files found"

        echo "=== Shared Folders ==="
        ls -la /vagrant-shared/ || echo "Shared folder not accessible"

        echo "=== #{distro} Test Complete ==="
      SHELL
    end 
  end 
end